<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to SAP S/4HANA Product Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
This Anypoint template serves as a foundation for setting an online sync of products from Salesforce to SAP S/4HANA.
Everytime there is a new product or a change in already existing one in Salesforce instance, the template will fetch it and send it to SAP S/4HANA to update product there.
Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this template leverages the Mule batch module.
The batch job is divided in Process and On Complete stages.
The integration is triggered by poll to Salesforce Products. New or modified products are passed to the batch as input.
In the batch the product is fetched from SAP S/4HANA by its name.
Afterwards every product from Salesforce is updated or created in SAP S/4HANA. 
Finally during the On Complete stage the template logs output statistics data into the console.
	</section>
		<section id="considerations">
â€‹To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both systems, that must be made for the template to run smoothly.
**Failing to do so could lead to unexpected behavior of the template.**

Before using this template, you may want to check out this [Documentation Page](https://docs.mulesoft.com/connectors/sap/sap-s4hana-cloud-connector), that will teach you how to work
with SAP S/4HANA and Anypoint Studio.
		</section>
		<section id="running_on_studio">
+ [Enabling Your Studio Project for SAP S/4HANA](https://docs.mulesoft.com/connectors/sap/sap-s4hana-cloud-connector)
		</section>
		<section id="application_configuration">

**Batch Aggregator Configuration**
+ page.size `100`

+ scheduler.frequency `10000`
+ scheduler.start.delay `5000`

**Watermarking default last query timestamp e.g. 2016-12-13T03:00:59Z**
+ watermark.default.expression `2014-06-26T12:30:00.000Z`

**SalesForce Connector Configuration**

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**SAP S/4HANA Connector Configuration**

+ s4hana.baseUrl `your.s4hana.address.com`
+ s4hana.username `your.s4hana.username`
+ s4hana.password `your.s4hana.password`
+ s4hana.productType `s4hana.productType`
+ s4hana.baseUnit `s4hana.baseUnit`
+ s4hana.productGroup `s4hana.productGroup`
        	</section>
		<section id="api_calls">

There are no particular considerations for this template regarding API calls
		</section>
				<section id="default_endpoints_xml">
		
This file is conformed by two Flows.
The first one we'll call it **schedulerFlow** flow. This one contains the Scheduler endpoint that will periodically trigger **queryFlow** flow and then executing the batch job process.
The second one we'll call it **queryFlow** flow. This one contains watermarking logic that will be querying Salesforce for updated/created Products that meet the defined criteria in the query since the last polling. The last invocation timestamp is stored by using Objectstore Component and updated after each Salesforce query.

		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the template is implemented on this XML, directed by one flow responsible of executing the logic.
For the purpose of this particular template the *businessLogicFlow* just executes the Batch Job which handles all the logic of it.
This flow has Error Handling that basically consists on invoking the *On Error Propagate Component* defined in *errorHandling.xml* file.
]]>
		</section>
	</sections>
</configuration>
